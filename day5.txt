BANKTRANSACTION(OVERRIDING):


class Transaction {
    void processTransaction(int amount) {
        System.out.println("Processing transaction of amount: " + amount);
    }
}
class BankTransfer extends Transaction {
    void processTransaction(int amount) {
        System.out.println("Processing Bank Transfer of amount: " + amount);
    }
}
class UPITransfer extends Transaction {
    void processTransaction(int amount) {
        System.out.println("Processing UPI Payment of amount: " + amount);
    }
}
class CreditCardPayment extends Transaction {
    void processTransaction(int amount) {
        System.out.println("Processing Credit Card Payment of amount: " + amount);
    }
}
class BANKTRANSACTION{
    public static void main(String[] args) {
        Transaction transaction;
        transaction = new BankTransfer();
        transaction.processTransaction(15000); 
        transaction = new UPITransfer();
        transaction.processTransaction(5000);   
        transaction = new CreditCardPayment();
        transaction.processTransaction(10000); 
}
}



OUTPUT:

Processing Bank Transfer of amount: 15000
Processing UPI Payment of amount: 5000
Processing Credit Card Payment of amount: 10000








vehicle using abstract class:

package PROGRAM;
class main{
    public static void main(String[] args){
        vehicle ref=new bike();
        ref.startsusing();
    }
}
abstract class vehicle {
  abstract void startsusing();
}
class bike extends vehicle{
    void startsusing() {
        System.out.println("bike starts with kick:");
    }
}



output:
bike starts with kick:







oops polymorphism(overloading):


class Shoppingitem{
    void additems(String item_name, int price){
        System.out.println("Item is:"+item_name+" "+"price is:"+price);
    }
    void additems(String item_name, int price, int item_quantity){
        int totalprice=price*item_quantity;
        System.out.println("Item name is"+" "+"Quantity:"+item_quantity+" "+"total_price"+totalprice);
    }
    void additems(String item_name, int price, int item_quantity, int discount)
    {
        double finalamount=(item_quantity*price)-discount;
        System.out.println("final discount:"+finalamount);
    }
}
public class Shoppingcart{
    public static void main(String[] args)
    {
        Shoppingitem ref= new Shoppingitem();
        ref.additems("laptop",3000);
        ref.additems("keyboard",1000,3);
        ref.additems("mouse",4000,5,10);
    }
}


output:
Item is:laptop price is:3000
Item name is Quantity:3 total_price3000
final discount:19990.0





polymorphism(overriding):


package PROGRAM;
class payvia{
    void pay(int amount){
        System.out.println("in hand amount:"+amount);
    }
}
class creditupi extends payvia{
    void pay(int amount){
        System.out.println("UPI amount:"+amount);
    }
}
class Gpay extends payvia{
    void pay(int amount){
        System.out.println("Gay amount:"+amount);
    }
} 
class paymentprocessing{
    public static void main(String[] args){
        payvia ref;
        ref=new creditupi();
        ref.pay(20000);
        ref= new Gpay();
        ref.pay(4000);
        
    }
}


output:
UPI amount:20000
Gay amount:4000





abstract class interface:


package PROGRAM;
interface Superclass1{
	 void sending();
	}
	interface superclass2{
	    void sender();
	}
	class subclass implements Superclass1, superclass2{
	    public void sending(){
	        System.out.println("Superclass 1");
	    }
	     public void sender(){
	        System.out.println("superclass 2");
	    }
	}
	class Mainn {
	    public static void main(String[] args) {
	       subclass s=new subclass();
	       s.sending();
	        s.sender();
	    }
	}


output:

Superclass 1
superclass 2
package PROGRAM;
class employee{
	void pay(double fixedsalary) {
		System.out.println("full time employee"+fixedsalary);
	}
	void pay(double sal ,int perhour) {
		double pt=sal*perhour;
		System.out.println("getting salalry for part-time"+pt);
		
	}
	void pay(double salary, int perhour, int bonus ) {
				double fl=(salary*perhour)+bonus;
				System.out.println("freelancer salary:"+fl);
	}
}
public class Salarycal {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		employee ref= new employee();
        ref.pay(800);
        ref.pay(100,3);
        ref.pay(100,5,30);

	}

}



package PROGRAM;

public class Main {
	public static void main(String[] args) {
        vehicle ref = new bike();
        ref.Startsusing();
    }
}
abstract class vehicle {
    abstract void Startsusing();
}
class bike extends vehicle {
   void Startsusing() 
   {
       System.out.println("Bike starts with kick.");
   }
}




package PROGRAM;
interface Superclass1{
    void Sending();
}
interface Superclass2{
    void Sended();
}
class Subclass implements Superclass1, Superclass2{
    public void Sending()
    {
        System.out.println("Superclass 1");
    }
    public void Sended()
    {
        System.out.println("Superclass 2");
    }
}
public class Mainn {
	public static void main(String[] args) {
        Subclass s = new Subclass();
        s.Sending();
        s.Sended();
	}
}



package PROGRAM;
import java.util.Scanner;
public class exception {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		System.out.println("enter b value:");
		int b=in.nextInt();
		int a=10;
	try {
		 a=a/b;
	}
	catch(Exception e) {
		System.out.println("ENter the proper value:");
		b=in.nextInt();
		a=a/b;
	}
	finally {
		System.out.println("Execution completed");
	}
}
}



package PROGRAM;
class Banktrans{
	void pay(int amount) {
		System.out.println("in hand amount:"+amount);
	}
}
class Otherbank extends Banktrans{
    void pay(int amount){
        System.out.println("transfered amount"+amount);
    }
}

public class Banking {
	public static void main(String[] args) {
	       Banktrans ref;
	       ref = new Otherbank();//object for credit class
	       ref.pay(2000);
	    }

}


